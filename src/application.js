// Generated by CoffeeScript 1.6.3
(function() {
  var Task, TaskApp, Tasks, _ref,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  jQuery(function($) {
    return new TaskApp({
      el: $("#tasks")
    });
  });

  Task = (function(_super) {
    __extends(Task, _super);

    function Task() {
      _ref = Task.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    Task.configure("Task", "name", "lon", "lat", "done");

    Task.extend(Spine.Model.Local);

    Task.active = function() {
      return this.select(function(item) {
        return !item.done;
      });
    };

    Task.done = function() {
      return this.select(function(item) {
        return !!item.done;
      });
    };

    Task.destroyDone = function() {
      var rec, _i, _len, _ref1, _results;
      _ref1 = this.done();
      _results = [];
      for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
        rec = _ref1[_i];
        _results.push(rec.destroy());
      }
      return _results;
    };

    return Task;

  })(Spine.Model);

  TaskApp = (function(_super) {
    __extends(TaskApp, _super);

    TaskApp.prototype.events = {
      "submit form": "create",
      "click  .clear": "clear"
    };

    TaskApp.prototype.elements = {
      ".items": "items",
      "form input": "input"
    };

    function TaskApp() {
      this.addAll = __bind(this.addAll, this);
      this.addOne = __bind(this.addOne, this);
      TaskApp.__super__.constructor.apply(this, arguments);
      Task.bind("create", this.addOne);
      Task.bind("refresh", this.addAll);
      Task.fetch();
    }

    TaskApp.prototype.addOne = function(task) {
      var view;
      view = new Tasks({
        item: task
      });
      return this.items.append(view.render().el);
    };

    TaskApp.prototype.addAll = function() {
      return Task.each(this.addOne);
    };

    TaskApp.prototype.create = function(e) {
      var location;
      e.preventDefault();
      location = Task.fromForm(e.target);
      location.save();
      return this.input.val("");
    };

    TaskApp.prototype.clear = function() {
      return Task.destroyDone();
    };

    return TaskApp;

  })(Spine.Controller);

  Tasks = (function(_super) {
    __extends(Tasks, _super);

    Tasks.prototype.events = {
      "change   input[type=checkbox]": "toggle",
      "click    .destroy": "destroyItem"
    };

    function Tasks() {
      this.render = __bind(this.render, this);
      Tasks.__super__.constructor.apply(this, arguments);
      this.item.bind("update", this.render);
      this.item.bind("destroy", this.release);
    }

    Tasks.prototype.render = function() {
      this.replace($("#taskTemplate").tmpl(this.item));
      return this;
    };

    Tasks.prototype.toggle = function() {
      this.item.done = !this.item.done;
      return this.item.save();
    };

    Tasks.prototype.destroyItem = function() {
      return this.item.destroy();
    };

    return Tasks;

  })(Spine.Controller);

}).call(this);
